#
# Licensed under LGPL v2.1, see the file COPYING.LIB in this tarball for details.
#

.SUFFIXES: .c .S .o .os .oS .so .a .s .i

# order is important, the stripping uses STRIP_FLAGS for lib-so, but not for lib-a
ifeq ($(HAVE_SHARED),y)
.LIBPATTERNS: "lib%.so"
libs: lib-so-y lib-a-y
else
.LIBPATTERNS: "lib%.a"
libs: lib-a-y
endif

lib-a-y: $(lib-a-y)
lib-so-y: $(lib-so-y)

ifneq ($(findstring s,$(MAKEFLAGS)),)
DISP := sil
Q := @
else
ifneq ($(V)$(VERBOSE),)
DISP := ver
Q := 
else
DISP := pur
Q := @
endif
endif

show_objs = $(subst ../,,$@)

pur_disp_compile.c = echo "  "CC $(show_objs)
pur_disp_compile.S = echo "  "AS $(show_objs)
pur_disp_compile.m = $(pur_disp_compile.c)
pur_disp_compile-m = echo "  "CC-m $(show_objs)
pur_disp_strip     = echo "  "STRIP $(STRIP_FLAGS) $@:*
pur_disp_ar        = echo "  "AR $(ARFLAGS) $@
pur_disp_ld        = echo "  "LD $($(LIB_NAME)_FULL_NAME)

sil_disp_compile.c = true
sil_disp_compile.S = true
sil_disp_compile.m = true
sil_disp_compile-m = true
sil_disp_strip     = true
sil_disp_ar        = true
sil_disp_ld        = true

ver_disp_compile.c = echo $(cmd_compile.c)
ver_disp_compile.S = echo $(cmd_compile.S)
ver_disp_compile.m = echo $(cmd_compile.m)
ver_disp_compile-m = echo $(cmd_compile-m)
ver_disp_strip     = echo $(cmd_strip)
ver_disp_ar        = echo $(cmd_ar)
ver_disp_ld        = 

disp_compile.c = $($(DISP)_disp_compile.c)
disp_compile.S = $($(DISP)_disp_compile.S)
disp_compile.m = $($(DISP)_disp_compile.m)
disp_compile-m = $($(DISP)_disp_compile-m)
disp_strip     = $($(DISP)_disp_strip)
disp_ar        = $($(DISP)_disp_ar)
disp_ld        = $($(DISP)_disp_ld)

cmd_compile.c = $(CC) -c $< -o $@ $(CPPFLAGS) $(CFLAGS) $(ARCH_CFLAGS) $(CFLAGS-$(suffix $@)) $(CFLAGS-$(notdir $@)) $(CFLAGS-$(notdir $<))
cmd_compile.S = $(cmd_compile.c) $(S_CPPFLAGS) $(ASFLAGS) $(ARCH_ASFLAGS) $(ASFLAGS-$(suffix $@)) $(ASFLAGS-$(notdir $@)) $(ASFLAGS-$(notdir $<))
cmd_compile.m = $(cmd_compile.c) -DL_$(patsubst %$(suffix $(notdir $@)),%,$(notdir $@))
cmd_compile-m = $(CC) $^ -c -o $@ $(CPPFLAGS) $(CFLAGS) $(ARCH_CFLAGS) $(CFLAGS-$(suffix $@)) $(CFLAGS-$(notdir $@)) $(CFLAGS-$(notdir $<)) $(CFLAGS-multi-y)
cmd_strip     = $(STRIPTOOL) $(STRIP_FLAGS) $^
cmd_ar        = $(AR) $(ARFLAGS) $@ $^

compile.c = @$(disp_compile.c) ; $(cmd_compile.c)
compile.E = $(cmd_compile.c:-c=-E)
compile.S = @$(disp_compile.S) ; $(cmd_compile.S)
compile.m = @$(disp_compile.m) ; $(cmd_compile.m)
compile-m = @$(disp_compile-m) ; $(cmd_compile-m)
do_strip  = @$(disp_strip)     ; $(cmd_strip)
do_ar     = @$(disp_ar)        ; $(cmd_ar)

CFLAGS-.os+=$(PICFLAG)
CFLAGS-.oS+=$(PICFLAG) -DSHARED

%.o:  %.c ; $(compile.c)
%.os: %.c ; $(compile.c)
%.oS: %.c ; $(compile.c)
%.o:  %.S ; $(compile.S)
%.os: %.S ; $(compile.S)
%.o:  %.s ; $(compile.S)
%.os: %.s ; $(compile.S)
%.E:  %.c ; $(compile.E)
%.E:  %.S ; $(compile.E)

#ifeq ($(HAVE_ELF),y)
CRT=crt1
#else
#CRT=crt0
#endif

ifeq ($(HAVE_SHARED),y)
CRTS=$(top_builddir)lib/$(CRT).o $(top_builddir)lib/S$(CRT).o
else
CRTS=$(top_builddir)lib/$(CRT).o
endif

$(top_builddir)lib/$(CRT).o: $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/$(CRT).S
	$(Q)$(INSTALL) -d $(dir $@)
	$(compile.S) -DL_$(patsubst %$(suffix $(notdir $@)),%,$(notdir $@))
	@$(disp_strip) $(show_objs)
	$(Q)$(STRIPTOOL) -x -R .note -R .comment $@

$(top_builddir)lib/S$(CRT).o: $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/$(CRT).S
	$(Q)$(INSTALL) -d $(dir $@)
	$(compile.S) $(PIEFLAG) -DL_$(patsubst %$(suffix $(notdir $@)),%,$(notdir $@))
	@$(disp_strip) $(show_objs)
	$(Q)$(STRIPTOOL) -x -R .note -R .comment $@

CTOR_TARGETS=$(top_builddir)lib/crti.o $(top_builddir)lib/crtn.o

ifeq ($(UCLIBC_CTOR_DTOR),y)
$(top_builddir)lib/crti.o: $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/crti.S
	$(Q)$(INSTALL) -d $(dir $@)
	$(compile.S) $(PICFLAG) $(SSP_DISABLE_FLAGS)

$(top_builddir)lib/crtn.o: $(top_srcdir)libc/sysdeps/linux/$(TARGET_ARCH)/crtn.S
	$(Q)$(INSTALL) -d $(dir $@)
	$(compile.S) $(PICFLAG) $(SSP_DISABLE_FLAGS)
else
$(CTOR_TARGETS):
	$(Q)$(INSTALL) -d $(top_builddir)lib
	$(do_ar)
endif

crt-y: $(crt-y)
$(crt-y): $(CRTS) $(CTOR_TARGETS)

other-y: $(other-y)
headers-y: $(headers-y)

objclean-y: $(objclean-y)
headers_clean-y: $(headers_clean-y)

$(top_builddir)lib/$(NONSHARED_LIBNAME): $(libc-nonshared-y)
	$(Q)$(INSTALL) -d $(dir $@)
	$(do_ar)

.PHONY: dummy create
clean: objclean-y headers_clean-y

ifeq ($(strip $(LIB_NAME)),)
LIB_NAME=libc
endif

ifeq ($(strip $($(LIB_NAME)_FULL_NAME)),)
$(LIB_NAME)_FULL_NAME:=$(LIB_NAME)-$(MAJOR_VERSION).$(MINOR_VERSION).$(SUBLEVEL).so
endif

$(LIB_NAME)-SHARED_OBJS=$($(LIB_NAME)-so-y) $($(LIB_NAME)-shared-y)
ifeq ($(HAVE_SHARED),y)
shared: $($(LIB_NAME)-SHARED_OBJS)
else
shared:
endif

$(LIB_NAME)-ARCHIVE_OBJS=$($(LIB_NAME)-a-y) $($(LIB_NAME)-static-y)
ifeq ($(DOPIC),y)
objs: shared $($(LIB_NAME)-ARCHIVE_OBJS:.o=.os) $(crt-y) $(other-y)
else
objs: shared $($(LIB_NAME)-ARCHIVE_OBJS) $(crt-y) $(other-y)
endif

libc=$(top_builddir)lib/libc.so
interp=$(top_builddir)libc/misc/internals/interp.os
ifeq ($(strip $(EXTRA_LINK_LIBS)),)
#EXTRA_LINK_LIBS:=$(interp) -L$(top_builddir)lib -lc $(LDADD_LIBFLOAT) $(LIBGCC)
EXTRA_LINK_LIBS:=$(interp) -L$(top_builddir)lib $(libc) $(LDADD_LIBFLOAT) $(LIBGCC)
endif

ifneq ($(strip $(LIB_NAME)),libc)
ifneq ($(strip $(LIB_NAME)),ld-uClibc)
$(top_builddir)lib/$(LIB_NAME).so: $($(LIB_NAME)_OUT)/$(LIB_NAME)_so.a $(interp) $(libc)
else
$(top_builddir)lib/$(LIB_NAME).so: $($(LIB_NAME)_OUT)/$(LIB_NAME)_so.a
endif
else
$(top_builddir)lib/$(LIB_NAME).so: $($(LIB_NAME)_OUT)/$(LIB_NAME)_so.a $(interp)
endif
	$(Q)$(INSTALL) -d $(dir $@)
	$(Q)$(RM) $@ $@.$(MAJOR_VERSION) $(top_builddir)lib/$($(LIB_NAME)_FULL_NAME)
	@$(disp_ld)
	$(Q)$(LD) $(LDFLAGS) $(EXTRA_LINK_OPTS) -soname=$(notdir $@).$(MAJOR_VERSION) \
		-o $(top_builddir)lib/$($(LIB_NAME)_FULL_NAME) $(SHARED_START_FILES) \
		--whole-archive $(firstword $^) --no-whole-archive \
		$(EXTRA_LINK_LIBS) $(SHARED_END_FILES)
	$(Q)$(LN) -sf $($(LIB_NAME)_FULL_NAME) $@.$(MAJOR_VERSION)
ifneq ($(strip $(LIB_NAME)),libc)
ifneq ($(strip $(LIB_NAME)),ld-uClibc)
	$(Q)$(LN) -sf $($(LIB_NAME)_FULL_NAME) $@
endif
else
	$(Q)echo "/* GNU ld script" > $@
	$(Q)echo " * Use the shared library, but some functions are only in" >> $@
	$(Q)echo " * the static library, so try that secondarily. */" >> $@
ifeq ($(COMPAT_ATEXIT),y)
	$(Q)echo "GROUP ( $(NONSHARED_LIBNAME) $(SHARED_MAJORNAME) $(ASNEEDED) )" >> $@
else
	$(Q)echo "GROUP ( $(SHARED_MAJORNAME) $(NONSHARED_LIBNAME) $(ASNEEDED) )" >> $@
endif
endif

$($(LIB_NAME)_OUT)/$(LIB_NAME)_m.o $($(LIB_NAME)_OUT)/$(LIB_NAME)_m.os: $($(LIB_NAME)-multi-y)
	$(compile-m)

# local testing only until libc is multi-capable
libc_m.os: $(libc-multi-y)
	$(compile-m)

ifneq ($(DOMULTI),n)

$($(LIB_NAME)_OUT)/$(LIB_NAME)_so.a: $($(LIB_NAME)_OUT)/$(LIB_NAME)_m.os $($(LIB_NAME)-nomulti-y:.o=.os) $($(LIB_NAME)-shared-y)
	$(Q)$(RM) $@
	$(do_strip)
	$(do_ar)

ifeq ($(DOPIC),y)
$(top_builddir)lib/$(LIB_NAME).a: $($(LIB_NAME)_OUT)/$(LIB_NAME)_m.os $($(LIB_NAME)-nomulti-y:.o=.os) $($(LIB_NAME)-static-y:.o=.os)
else
$(top_builddir)lib/$(LIB_NAME).a: $($(LIB_NAME)_OUT)/$(LIB_NAME)_m.o $($(LIB_NAME)-nomulti-y) $($(LIB_NAME)-static-y)
endif
	$(Q)$(INSTALL) -d $(dir $@)
	$(Q)$(RM) $@
	$(do_strip)
	$(do_ar)

else # DOMULTI

$($(LIB_NAME)_OUT)/$(LIB_NAME)_so.a: $($(LIB_NAME)-SHARED_OBJS)
	$(Q)$(RM) $@
	$(do_strip)
	$(do_ar)

ifeq ($(DOPIC),y)
$(top_builddir)lib/$(LIB_NAME).a: $($(LIB_NAME)-ARCHIVE_OBJS:.o=.os)
else
$(top_builddir)lib/$(LIB_NAME).a: $($(LIB_NAME)-ARCHIVE_OBJS)
endif
	$(Q)$(INSTALL) -d $(dir $@)
	$(Q)$(RM) $@
	$(do_strip)
	$(do_ar)

endif # DOMULTI

$(LIB_NAME)_clean:
	$(RM) $($(LIB_NAME)_OUT)/*.{o,os,a}
